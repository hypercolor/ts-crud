{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./index.ts","webpack:///./src/crud-config.ts","webpack:///./src/crud-handlers.ts","webpack:///./src/crud-routes.ts","webpack:///./src/handlers/get/get-all-objects-handler.ts","webpack:///./src/handlers/handler.ts","webpack:///./src/handlers/shared/create-object-from-json.ts","webpack:///./src/handlers/shared/fetch-object.ts","webpack:///./src/handlers/shared/update-object-from-json.ts","webpack:///./src/handlers/shared/update-pivot-tables.ts","webpack:///./src/promise_queue.ts","webpack:///external \"p-queue\"","webpack:///external \"ts-express-controller\""],"names":[],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { PatchByIdRoute } from \"./src/crud-routes\";\nimport { UpdateObjectFromJson } from \"./src/handlers/shared/update-object-from-json\";\nimport { IPivotConfig, IPivotObject, UpdatePivotTables } from \"./src/handlers/shared/update-pivot-tables\";\n\nexport {GetRoute, PostRoute, DeleteRoute, MarkDeletedRoute, MarkUndeletedRoute, MultiPutRoute, MultiPatchRoute, PutByIdRoute, QueryRoute, PatchByIdRoute} from './src/crud-routes';\nexport {IUserRequest} from './src/IUserRequest';\nexport {CrudHandlers} from './src/crud-handlers';\nexport {CrudConfig} from './src/crud-config';\n\n\nexport {GetAllObjectsHandler} from './src/handlers/get/get-all-objects-handler';\n\nexport {UpdateObjectFromJson, EUpdateType} from './src/handlers/shared/update-object-from-json';\nexport {FetchObject} from './src/handlers/shared/fetch-object';\nexport {CreateObjectFromJson} from './src/handlers/shared/create-object-from-json';\n\nexport {IPivotConfig, IPivotObject, UpdatePivotTables} from './src/handlers/shared/update-pivot-tables';\n","import { ControllerConfig } from \"ts-express-controller\";\n\nexport class CrudConfig {\n  public static setControllerConfig(name: string, description: string, version: string){\n    ControllerConfig.packageConfig.packageName = name;\n    ControllerConfig.packageConfig.packageDescription = description;\n    ControllerConfig.packageConfig.packageVersion = version;\n  }\n\n}\n","import { Collection } from 'bookshelf'\nimport { Transaction } from 'knex'\n// import {IUserRequest} from '../../util/auth';\n// import * as e from \"express\";\nimport { IPostgresModelClass, PostgresModel } from 'ts-postgres-model'\nimport { PromiseQueue } from './promise_queue'\nimport { IUserRequest } from './IUserRequest'\nimport { EUpdateType, UpdateObjectFromJson } from './handlers/shared/update-object-from-json'\nimport { CreateObjectFromJson } from './handlers/shared/create-object-from-json'\nimport { FetchObject } from './handlers/shared/fetch-object'\n\nexport class CrudHandlers {\n  public static postFromRequestBody<T extends PostgresModel<T>>(req: IUserRequest, model: IPostgresModelClass<T>) {\n    if (req.body.constructor === Array) {\n      const queue = new PromiseQueue(1)\n      return queue.runAllPromiseFunctions(\n        req.body.map((jsonObject: any) => {\n          return () => {\n            return new CreateObjectFromJson(model, jsonObject).run()\n          }\n        })\n      )\n    } else {\n      return new CreateObjectFromJson(model, req.body).run()\n    }\n  }\n\n  public static getObjectById<T extends PostgresModel<T>>(\n    req: IUserRequest,\n    model: IPostgresModelClass<T>,\n    objectId: number\n  ): Promise<T> {\n    return new FetchObject(model, objectId, true).run().then((object: T) => {\n      if (object === null) {\n        return Promise.reject({ code: 404, error: model.instanceName + ' not found: ' + objectId })\n      } else {\n        return Promise.resolve(object)\n      }\n    })\n  }\n\n  public static putObject<T extends PostgresModel<T>>(\n    req: IUserRequest,\n    model: IPostgresModelClass<T>,\n    objectId: number,\n    transaction?: Transaction\n  ) {\n    req.body.id = objectId\n    return new UpdateObjectFromJson(model, req.body, EUpdateType.PUT, transaction).run()\n  }\n\n  public static patchObject<T extends PostgresModel<T>>(\n    req: IUserRequest,\n    model: IPostgresModelClass<T>,\n    objectId: number,\n    transaction?: Transaction\n  ) {\n    req.body.id = objectId\n    return new UpdateObjectFromJson(model, req.body, EUpdateType.PATCH, transaction).run()\n  }\n\n  public static putObjects<T extends PostgresModel<T>>(\n    req: IUserRequest,\n    model: IPostgresModelClass<T>,\n    transaction?: Transaction\n  ): Promise<T | Collection<T>> {\n    if (req.body.constructor === Array) {\n      const queue = new PromiseQueue(1)\n      return queue.runAllPromiseFunctions(\n        req.body.map((jsonObject: any) => {\n          return () => {\n            return new UpdateObjectFromJson(model, jsonObject, EUpdateType.PUT, transaction).run()\n          }\n        })\n      )\n    } else {\n      return new UpdateObjectFromJson(model, req.body, EUpdateType.PUT, transaction).run()\n    }\n  }\n\n  public static patchObjects<T extends PostgresModel<T>>(\n    req: IUserRequest,\n    model: IPostgresModelClass<T>,\n    transaction?: Transaction\n  ): Promise<T | Collection<T>> {\n    if (req.body.constructor === Array) {\n      const queue = new PromiseQueue(1)\n      return queue.runAllPromiseFunctions(\n        req.body.map((jsonObject: any) => {\n          return () => {\n            return new UpdateObjectFromJson(model, jsonObject, EUpdateType.PATCH, transaction).run()\n          }\n        })\n      )\n    } else {\n      return new UpdateObjectFromJson(model, req.body, EUpdateType.PATCH, transaction).run()\n    }\n  }\n\n  public static deleteObject<T extends PostgresModel<T>>(\n    req: IUserRequest,\n    model: IPostgresModelClass<T>,\n    objectId: number\n  ) {\n    let object\n    return new FetchObject(model, objectId, false)\n      .run()\n      .then((o: T) => {\n        object = o\n        if (object === null) {\n          return Promise.reject({ code: 404, error: model.instanceName + ' not found: ' + objectId })\n        } else {\n          return object.destroyForUser(req.user)\n        }\n      })\n      .then(() => {\n        return Promise.resolve()\n      })\n  }\n\n  public static setObjectDeleted<T extends PostgresModel<T>>(\n    req: IUserRequest,\n    model: IPostgresModelClass<T>,\n    objectId: number\n  ) {\n    return new FetchObject(model, objectId, false).run().then((object: T) => {\n      if (object === null) {\n        return Promise.reject({ code: 404, error: model.instanceName + ' not found: ' + objectId })\n      } else {\n        object.deleted = true\n        return object.saveForUser(req.user)\n      }\n    })\n  }\n\n  public static setObjectUndeleted<T extends PostgresModel<T>>(\n    req: IUserRequest,\n    model: IPostgresModelClass<T>,\n    objectId: number\n  ) {\n    return new FetchObject(model, objectId, false).run().then((object: T) => {\n      if (object === null) {\n        return Promise.reject({ code: 404, error: model.instanceName + ' not found: ' + objectId })\n      } else {\n        object.deleted = false\n        return object.saveForUser(req.user)\n      }\n    })\n  }\n\n  // public static fetchObjectForRequest<T extends PostgresModel<T>>(req: IUserRequest, model: IPostgresModelClass<T>, id: number, fetchParams?: any) {\n  //   const query = new model().where({id});\n  //   return query.fetchForUser(req.user, fetchParams);\n  // }\n}\n\n/**\n * Worker method for PUT\n *\n * @param model\n * @param jsonObject\n * @param req\n * @param transaction\n * @returns {Promise|*}\n */\n// export function handlePutForJsonObject<T extends PostgresModel<T>>(model: IPostgresModelClass<T>, jsonObject: any, req: IUserRequest, transaction?: Transaction): Promise<T> {\n//   if (jsonObject.id === undefined || jsonObject.id === '') {\n//     return handlePostForJsonObject(model, jsonObject, req);\n//   } else {\n//     return fetchObjectForRequest(req, model, jsonObject.id)\n//     .then(object => {\n//       if (object === null) {\n//         return Promise.reject({code: 404, error: model.instanceName + ' not found: ' + jsonObject.id});\n//       } else {\n//         if (transaction){\n//           return object.updateWithParams(jsonObject,req, {transacting: transaction});\n//         } else {\n//           return object.updateWithParams(jsonObject,req);\n//         }\n//       }\n//     })\n//     .then(object => {\n//       if (req.query.p === undefined) {\n//         return Promise.resolve(object);\n//       } else {\n//         return validateFetchOptions(model, req.query.p)\n//         .then((fetchOptions: any) => {\n//           return new model().where({id: object.id}).fetchForUser(req, {withRelated: fetchOptions});\n//         });\n//       }\n//     });\n//   }\n// }\n\n/**\n * Worker method for POST\n *\n * @param model\n * @param jsonObject\n * @param req\n * @returns {Promise|*}\n */\n// function handlePostForJsonObject<T extends PostgresModel<T>>(model: IPostgresModelClass<T>, jsonObject: any, req: IUserRequest) {\n//   // if (!req.user){\n//   //   return Promise.reject({code: 500, error: 'Request had no user.'});\n//   // } else {\n//     jsonObject = jsonObject || {};\n//     // if (((new model().columns) as any)['userId']) {\n//     //   jsonObject.userId = jsonObject.userId || req.user.id;\n//     // }\n//     const object = new model();\n//     return object.updateWithParams(jsonObject, req.user)\n//     .then(savedObject => {\n//       if (req.query.p === undefined) {\n//         return Promise.resolve(savedObject);\n//       } else {\n//         return validateFetchOptions(model, req.query.p)\n//         .then((fetchOptions: any) => {\n//           return new model().where({id: object.id}).fetchForUser(req.user, {withRelated: fetchOptions});\n//         });\n//       }\n//     });\n//   // }\n// }\n\n/**\n * Fetch an object for a req.\n *\n * @param req\n * @param model\n * @param id\n * @param [fetchParams] - Fetch options\n * @returns {*|Promise.<Model|null>}\n */\n// export function fetchObjectForRequest<T extends PostgresModel<T>>(req: IUserRequest, model: IPostgresModelClass<T>, id: number, fetchParams?: any) {\n//   let query = new model().where({id});\n//   return query.fetchForUser(req, fetchParams);\n// }\n","\n\n// import {PostgresModel, IPostgresModelClass} from '../../models/shared/base';\n// import {IUserRequest} from '../../util/auth';\n// import {Controller, Response} from './base';\nimport {CrudHandlers} from './crud-handlers';\nimport { IUserRequest } from \"./IUserRequest\";\nimport { IPostgresModelClass, PostgresModel } from \"ts-postgres-model\";\nimport {Controller} from 'ts-express-controller';\nimport {Response} from 'express';\nimport { GetAllObjectsHandler } from \"./handlers/get/get-all-objects-handler\";\n\n/**\n * Default GET by ID\n */\nexport class GetRoute extends Controller {\n  constructor(private _type: IPostgresModelClass<any>, private idParamName: string) {super({\n    routeParams: [idParamName]\n  });}\n  protected handleRequest(params: any, req: IUserRequest, res: Response) {\n    return CrudHandlers.getObjectById(req, this._type, params[this.idParamName]);\n  }\n}\n\n\n/**\n * Default POST from request JSON body\n */\nexport class PostRoute extends Controller {\n  constructor(private _type: IPostgresModelClass<any>) {super();}\n  protected handleRequest(params: any, req: IUserRequest, res: Response) {\n    return CrudHandlers.postFromRequestBody(req, this._type);\n  }\n}\n\n/**\n * Default PUT by ID from request JSON body\n */\nexport class PutByIdRoute<T extends PostgresModel<T>> extends Controller {\n  constructor(private _type: IPostgresModelClass<any>, private idParamName: string) {super({\n    routeParams: [idParamName]\n  });}\n  protected handleRequest(params: any, req: IUserRequest, res: Response) {\n    return CrudHandlers.putObject(req, this._type, params[this.idParamName]);\n  }\n}\n\n/**\n * Default PATCH by ID from request JSON body\n */\nexport class PatchByIdRoute<T extends PostgresModel<T>> extends Controller {\n  constructor(private _type: IPostgresModelClass<any>, private idParamName: string) {super({\n    routeParams: [idParamName]\n  });}\n  protected handleRequest(params: any, req: IUserRequest, res: Response) {\n    return CrudHandlers.patchObject(req, this._type, params[this.idParamName]);\n  }\n}\n\n/**\n * Default PUT by ID from request JSON body\n */\nexport class MultiPutRoute<T extends PostgresModel<T>> extends Controller {\n  constructor(private _type: IPostgresModelClass<any>) {super();}\n  protected handleRequest(params: any, req: IUserRequest, res: Response) {\n    return CrudHandlers.putObjects(req, this._type);\n  }\n}\n\n/**\n * Default PUT by ID from request JSON body\n */\nexport class MultiPatchRoute<T extends PostgresModel<T>> extends Controller {\n  constructor(private _type: IPostgresModelClass<any>) {super();}\n  protected handleRequest(params: any, req: IUserRequest, res: Response) {\n    return CrudHandlers.patchObjects(req, this._type);\n  }\n}\n\n/**\n * Default DELETE by ID\n */\nexport class DeleteRoute extends Controller {\n  constructor(private _type: IPostgresModelClass<any>, private idParamName: string) {super({\n    routeParams: [idParamName]\n  });}\n  protected handleRequest(params: any, req: IUserRequest, res: Response) {\n    return CrudHandlers.deleteObject(req, this._type, params[this.idParamName]);\n  }\n}\n\n/**\n * Default Query for all objects of a type\n */\nexport class QueryRoute extends Controller {\n  constructor(private _type: IPostgresModelClass<any>, private fetchParams?: any, private _allowDeleted?: boolean) {super();}\n  protected handleRequest(params: any, req: IUserRequest, res: Response) {\n    return new GetAllObjectsHandler(req, this._type, this.fetchParams, this._allowDeleted).run();\n  }\n}\n\n\nexport class MarkDeletedRoute extends Controller {\n  constructor(private _type: IPostgresModelClass<any>, private idParamName: string) {super({\n    routeParams: [idParamName]\n  });}\n  protected handleRequest(params: any, req: IUserRequest, res: Response) {\n    return CrudHandlers.setObjectDeleted(req, this._type, params[this.idParamName]);\n  }\n}\n\nexport class MarkUndeletedRoute extends Controller {\n  constructor(private _type: IPostgresModelClass<any>, private idParamName: string) {super({\n    routeParams: [idParamName]\n  });}\n  protected handleRequest(params: any, req: IUserRequest, res: Response) {\n    return CrudHandlers.setObjectUndeleted(req, this._type, params[this.idParamName]);\n  }\n}\n\n","import { IPostgresModelClass, PostgresModel } from \"ts-postgres-model\";\nimport { IUserRequest } from \"../../IUserRequest\";\nimport { Handler } from \"../handler\";\n\nexport class GetAllObjectsHandler<T extends PostgresModel<T>> extends Handler {\n\n  constructor(private req: IUserRequest, private model: IPostgresModelClass<T>, private fetchParams: any, private allowDeleted: boolean | undefined){\n    super()\n  }\n\n  run() {\n    const query = this.allowDeleted ? {} : {deleted: false};\n    return new this.model().where(query).fetchAllForUser(this.req.user, this.fetchParams)\n    .then(objects => {\n      return Promise.resolve(objects.toJSON());\n    });\n  }\n}\n","export abstract class Handler {\n  abstract run(): PromiseLike<any>\n}\n","import { Handler } from '../handler'\nimport { IPostgresModelClass, PostgresModel } from 'ts-postgres-model'\nimport { FetchObject } from './fetch-object'\nimport { Transaction } from 'knex'\n\nexport class CreateObjectFromJson<T extends PostgresModel<T>> extends Handler {\n  constructor(\n    private model: IPostgresModelClass<T>,\n    private jsonObject: any,\n    private transaction?: Transaction,\n    private populationString?: string\n  ) {\n    super()\n\n    this.jsonObject = jsonObject || {}\n  }\n\n  run(): Promise<T> {\n    const object = new this.model()\n\n    return Promise.resolve()\n      .then(() => {\n        if (this.transaction) {\n          return object.updateWithParams(this.jsonObject, { transacting: this.transaction })\n        } else {\n          return object.updateWithParams(this.jsonObject)\n        }\n      })\n      .then(savedObject => {\n        if (this.populationString === undefined) {\n          return Promise.resolve(savedObject)\n        } else {\n          return new FetchObject(this.model, this.jsonObject.id, true, this.populationString).run()\n        }\n      })\n  }\n}\n","import { Handler } from '../handler'\nimport { IPostgresModelClass, PostgresModel } from 'ts-postgres-model'\n\nexport class FetchObject<T extends PostgresModel<T>> extends Handler {\n  constructor(\n    private model: IPostgresModelClass<T>,\n    private objectId: number,\n    private allowQueryPopulation: boolean,\n    private fetchParams?: any,\n    private populationString?: string\n  ) {\n    super()\n\n    this.fetchParams = fetchParams || {}\n\n    if (!this.fetchParams.withRelated) {\n      this.fetchParams.withRelated = []\n    }\n  }\n\n  run() {\n    if (this.allowQueryPopulation && this.populationString) {\n      return validateFetchOptions(this.model, this.populationString).then((fetchOptions: Array<string>) => {\n        fetchOptions.forEach(option => {\n          this.fetchParams.withRelated.push(option)\n        })\n        return this.doQuery()\n      })\n    } else {\n      return this.doQuery()\n    }\n  }\n\n  private doQuery() {\n    return Promise.resolve().then(() => {\n      return new this.model().where({ id: this.objectId }).fetch(this.fetchParams)\n    })\n  }\n}\n\n/**\n * Validate the fetch parameters specified in population-enabled routes.\n *\n * @param model\n * @param fetchOptionsString\n * @returns {*}\n */\nfunction validateFetchOptions<T extends PostgresModel<T>>(\n  model: IPostgresModelClass<T>,\n  fetchOptionsString: string\n): Promise<Array<string>> {\n  // console.log(\"Validating fetch options for \" + model.model.MODEL_NAME + \": \" + fetchOptionsString);\n\n  if (!fetchOptionsString) {\n    return Promise.resolve([])\n  } else {\n    return parseFetchOptions(fetchOptionsString).then(fetchOptions => {\n      if (typeof fetchOptions === 'string') {\n        if (!isValidRelationship(model, fetchOptions)) {\n          return Promise.reject({\n            code: 400,\n            error: 'Invalid population for ' + model.constructor.name + ': ' + fetchOptions,\n          })\n        } else {\n          return Promise.resolve([fetchOptions])\n        }\n      } else {\n        return Promise.all(\n          fetchOptions.map(fetchOption => {\n            if (!isValidRelationship(model, fetchOption)) {\n              return Promise.reject({\n                code: 400,\n                error: 'Invalid population for ' + model.constructor.name + ': ' + fetchOption,\n              })\n            } else {\n              return Promise.resolve()\n            }\n          })\n        ).then(() => {\n          return Promise.resolve(fetchOptions)\n        })\n      }\n    })\n  }\n\n  function isValidRelationship(testModel: IPostgresModelClass<T>, testRelationship: string) {\n    if (!testModel.relationships) {\n      return false\n    } else {\n      let isValid = false\n      Object.values(testModel.relationships).forEach(relationship => {\n        if (relationship === testRelationship) {\n          isValid = true\n        }\n      })\n      return isValid\n    }\n  }\n}\n\n/**\n * Convert a fetch options string from the URL into a JSON object.\n *\n * @param fetchOptionsString\n * @returns {*}\n */\nfunction parseFetchOptions(fetchOptionsString: string): Promise<string | Array<string>> {\n  return new Promise((resolve, reject) => {\n    try {\n      const options = JSON.parse(fetchOptionsString)\n      if (options.constructor !== String && options.constructor !== Array) {\n        reject('Invalid JSON type for fetch options: ' + options.constructor.name)\n      } else {\n        resolve(options)\n      }\n    } catch (err) {\n      reject('Invalid JSON for fetch options: ' + fetchOptionsString + ' - ' + err.message)\n    }\n  })\n}\n","import { Handler } from '../handler'\nimport { IPostgresModelClass, PostgresModel } from 'ts-postgres-model'\nimport { Transaction } from 'knex'\nimport { CreateObjectFromJson } from './create-object-from-json'\nimport { FetchObject } from './fetch-object'\n\nexport enum EUpdateType {\n  PUT,\n  PATCH,\n}\n\nexport class UpdateObjectFromJson<T extends PostgresModel<T>> extends Handler {\n  constructor(\n    private model: IPostgresModelClass<T>,\n    private jsonObject: any,\n    private updateType: EUpdateType,\n    private transaction?: Transaction,\n    private populationString?: string\n  ) {\n    super()\n  }\n\n  run(): Promise<T> {\n    if (this.jsonObject.id === undefined || this.jsonObject.id === '') {\n      return new CreateObjectFromJson(this.model, this.jsonObject, this.transaction, this.populationString).run()\n    } else {\n      return new FetchObject(this.model, this.jsonObject.id, false)\n        .run()\n        .then((object: T) => {\n          if (object === null) {\n            return Promise.reject({ code: 404, error: this.model.instanceName + ' not found: ' + this.jsonObject.id })\n          } else {\n            // For PUT requests, we want to clear out any existing data, then update from the request\n            if (this.updateType === EUpdateType.PUT) {\n              Object.values(object.columns).forEach(columnName => {\n                delete object[columnName]\n              })\n            }\n\n            if (this.transaction) {\n              return object.updateWithParams(this.jsonObject, { transacting: this.transaction })\n            } else {\n              return object.updateWithParams(this.jsonObject)\n            }\n          }\n        })\n        .then((object: T) => {\n          if (this.populationString === undefined) {\n            return Promise.resolve(object)\n          } else {\n            return new FetchObject(this.model, this.jsonObject.id, true, this.populationString).run()\n          }\n        })\n    }\n  }\n}\n","import { Handler } from \"../handler\";\nimport { IPostgresModelClass, IUser, PostgresModel } from \"ts-postgres-model\";\nimport { Transaction } from \"knex\";\n\n\nexport interface IPivotConfig<T extends PostgresModel<T>> {\n  foreignArrayPropertyName: string\n  pivotModel: IPostgresModelClass<T>\n  pivotKeyLocalItemId: string\n  pivotKeyForeignItemId: string\n\n}\n\nexport interface IPivotObject {\n  id: number\n}\n\n\n//\n//    Item    <->     Pivot       <->       Foreign\n//    * id            * id                  * id\n//    * \"foreigns\"    * item id\n//                    * foreign id\n\nexport class UpdatePivotTables<T extends PostgresModel<T>> extends Handler {\n\n\n  constructor(private user: IUser, private objectJson: any, private localObjectId: any, private pivotConfig: IPivotConfig<T>, private transaction?: Transaction){\n    super();\n  }\n\n  run() {\n    // console.log('updating pivot table for ' + pivotConfig.foreignArrayPropertyName);\n\n    const desiredForeignObjects: Array<IPivotObject> = this.objectJson[this.pivotConfig.foreignArrayPropertyName];\n\n    // console.log('User desires ' + desiredForeignObjects.length + ' pivot entries');\n\n    if (!desiredForeignObjects) {\n      return Promise.resolve();\n    } else if (desiredForeignObjects.constructor !== Array) {\n      return Promise.reject({code: 500, error: 'Cant update non-array pivot table property: ' + this.pivotConfig.foreignArrayPropertyName + ' - found ' + desiredForeignObjects.constructor.name});\n    } else {\n\n\n      // 1.  Fetch all objects currently in pivot table\n\n      const pivotQuery: any = {};\n      pivotQuery[this.pivotConfig.pivotKeyLocalItemId] = this.localObjectId;\n\n      return new this.pivotConfig.pivotModel().where(pivotQuery).fetchAllForUser(this.user)\n      .then(currentPivotEntries => {\n\n        const foreignObjectsToAdd: Array<IPivotObject> = [];\n        const pivotEntriesToRemove: Array<PostgresModel<T>> = [];\n\n\n        // 2.  Create new pivot table objects for ones not found\n\n        desiredForeignObjects.forEach(desiredForeignObject => {\n          let found = false;\n          currentPivotEntries.forEach(pivotEntry => {\n            if (pivotEntry.id === desiredForeignObject.id) {\n              found = true;\n            }\n          });\n          if (!found) {\n            foreignObjectsToAdd.push(desiredForeignObject);\n          }\n        });\n\n\n        // 3.  Delete pivot table objects for ones not found\n\n        currentPivotEntries.forEach(pivotEntry => {\n          let found = false;\n          desiredForeignObjects.forEach(desiredPivotEntry => {\n            if (pivotEntry.id === desiredPivotEntry.id) {\n              found = true;\n            }\n          });\n          if (!found) {\n            pivotEntriesToRemove.push(pivotEntry);\n          }\n        });\n\n        // console.log('We need to add ' + foreignObjectsToAdd.length + ' entries and remove ' + pivotEntriesToRemove.length + ' entries.');\n\n        return Promise.all([\n          createPivotEntries(this.user, this.localObjectId, this.pivotConfig, foreignObjectsToAdd, this.transaction),\n          removePivotEntries(this.user, this.pivotConfig, pivotEntriesToRemove, this.transaction)\n        ]);\n\n      })\n\n      .then(() => {\n        return Promise.resolve();\n      });\n\n\n    }\n  }\n}\n\n\n\n\n\nfunction createPivotEntries<T extends PostgresModel<T>>(user: IUser, localObjectId: number, pivotConfig: IPivotConfig<T>, foreignObjectsToAdd: Array<IPivotObject>, transaction?: Transaction): Promise<Array<any>> {\n\n  return Promise.all(foreignObjectsToAdd.map(foreignObjectToAdd => {\n\n    // console.log('creating new pivot entry for foreign object: ' + JSON.stringify(foreignObjectToAdd));\n\n    const pivotEntry = new pivotConfig.pivotModel();\n    (pivotEntry as any)[pivotConfig.pivotKeyForeignItemId] = foreignObjectToAdd.id;\n    (pivotEntry as any)[pivotConfig.pivotKeyLocalItemId] = localObjectId;\n\n    // console.log('Created ' + JSON.stringify(pivotEntry));\n\n    if (transaction) {\n      return pivotEntry.saveForUser(user, {transacting: transaction});\n    } else {\n      return pivotEntry.saveForUser(user);\n    }\n  }));\n}\n\nfunction removePivotEntries<T extends PostgresModel<T>>(user: IUser, pivotConfig: IPivotConfig<T>, pivotEntriesToRemove: Array<PostgresModel<T>>, transaction?: Transaction): Promise<Array<any>> {\n\n  return Promise.all(pivotEntriesToRemove.map(pivotEntry => {\n    if (transaction) {\n      return pivotEntry.destroyForUser(user, {transacting: transaction});\n    } else {\n      return pivotEntry.destroyForUser(user);\n    }\n  }));\n}\n","\n\nimport * as PQueue from 'p-queue';\n\nexport class PromiseQueue {\n\n  private queue: PQueue;\n\n  constructor(maxConcurrent: number){\n    this.queue = new PQueue({concurrency: maxConcurrent});\n  }\n\n  public add(promiseFunction: () => Promise<any>): Promise<any> {\n    return this.queue.add(promiseFunction);\n  }\n\n  public runAllPromiseFunctions(promiseFunctions: Array<() => Promise<any>>): Promise<any> {\n    if (!promiseFunctions) {\n      return Promise.reject('promiseFunctions was not supplied');\n    } else if (promiseFunctions.length === 0) {\n      return Promise.resolve();\n    } else {\n      const addedPromises: Array<Promise<any>> = [];\n      promiseFunctions.forEach(promiseFunction => {\n        // console.log(\"Adding promiseFunction to queue...\");\n        addedPromises.push(this.add(promiseFunction));\n      });\n\n      return new Promise((resolve, reject) => {\n        Promise.all(addedPromises)\n        .then(results => {\n          // console.log(\"All promises resolved.\");\n          resolve(results);\n        })\n        .catch(err => {\n          // console.log(\"Queue promise failed...\");\n          reject(err);\n        });\n      });\n\n      // return Q.all(addedPromises);\n    }\n  }\n\n}\n\n","module.exports = require(\"p-queue\");","module.exports = require(\"ts-express-controller\");"],"sourceRoot":""}